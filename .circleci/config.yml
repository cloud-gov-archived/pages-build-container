version: 2.1

##################################
##              Orbs            ##
##################################
orbs:
  aws-ecr: circleci/aws-ecr@7.2.0


##################################
##            Commands          ##
##################################
commands:
  deploy-to-cg:
    description: Deploy a cloud foundry app to cloud.gov
    parameters:
      manifest:
        type: string
        default: ./.cloudgov/manifest.yml
      action:
        type: enum
        enum: ["deploy", "restage"]
        default: "deploy"
      app:
        type: string
      docker-registry-url:
        type: env_var_name
        default: "DUMMY_ENV_VAR"
      docker-image:
        type: string
        default: ""
    steps:
      - run:
          name: Setup environment
          command: |
            if [ "$CIRCLE_BRANCH" = "main" ]; then
              echo "export CF_SPACE=production" >> $BASH_ENV
              echo "export CF_USERNAME=$CF_USERNAME_PRODUCTION" >> $BASH_ENV
              echo "export CF_PASSWORD=$CF_PASSWORD_PRODUCTION" >> $BASH_ENV
              echo "export CF_DOCKER_PASSWORD=$AWS_ECR_READ_SECRET_PRODUCTION" >> $BASH_ENV
              echo "export CF_DOCKER_USERNAME=$AWS_ECR_READ_KEY_PRODUCTION" >> $BASH_ENV
            fi
            if [ "$CIRCLE_BRANCH" = "staging" ]; then
              echo "export CF_SPACE=staging" >> $BASH_ENV
              echo "export CF_USERNAME=$CF_USERNAME_STAGING" >> $BASH_ENV
              echo "export CF_PASSWORD=$CF_PASSWORD_STAGING" >> $BASH_ENV
              echo "export CF_DOCKER_PASSWORD=$AWS_ECR_READ_SECRET_STAGING" >> $BASH_ENV
              echo "export CF_DOCKER_USERNAME=$AWS_ECR_READ_KEY_STAGING" >> $BASH_ENV
            fi

      - run:
          name: Install cloud foundry cli
          command: |
            curl -L "https://packages.cloudfoundry.org/stable?release=linux64-binary&version=v7&source=github" | tar -zx
            sudo mv cf7 /usr/local/bin/cf
            cf version

      - run:
          name: Log into cloud.gov
          command: |
            cf api https://api.fr.cloud.gov
            cf login -u $CF_USERNAME -p $CF_PASSWORD -o gsa-18f-federalist -s $CF_SPACE

      - when:
          condition:
            equal: ["deploy", << parameters.action >> ]
          steps:
            - run:
                name: Deploy app '<< parameters.app >>'
                command: |
                  set +e

                  onerr() {
                    echo "Deployment failed, cancelling."
                    cf cancel-deployment << parameters.app >>
                    cf logout
                    exit 1
                  }
                  trap 'onerr' ERR
                  
                  cf push << parameters.app >> \
                    -f << parameters.manifest >> \
                    --vars-file "./.cloudgov/vars/${CF_SPACE}.yml" \
                    --docker-image "$<< parameters.docker-registry-url >>/<< parameters.docker-image >>" \
                    --docker-username $CF_DOCKER_USERNAME


      - when:
          condition:
            equal: ["restage", << parameters.action >> ]
          steps:
            - run:
                name: Restage app '<< parameters.app >>'
                command: |
                  cf restage << parameters.app >>


      - run:
          name: Log out from cloud.gov
          command: cf logout


##################################
##             Jobs             ##
##################################
jobs:
  test:
    machine: true
    environment:
      CC_TEST_REPORTER_ID: 449ef357d9e81688685bde0dcdd348bc764d717fa6a4c9c01562bd8037ceb665      
    steps:
      - checkout

      - run: docker build -f Dockerfile-test -t test .

      - run: docker run --rm -v `pwd`:/app -w /app -e CC_TEST_REPORTER_ID=$CC_TEST_REPORTER_ID test ci/tasks/test.sh


  build-push-deploy:
    executor: aws-ecr/default

    parameters:
      app:
        type: string
      extension:
        default: ""
        type: enum
        enum: ["", "-exp"]
      space:
        type: enum
        enum: ["staging", "production"]
      account-url:
        type: env_var_name
      aws-access-key-id:
        type: env_var_name
      aws-secret-access-key:
        type: env_var_name
      region:
        type: env_var_name
      repo:
        type: string 

    steps:
      - aws-ecr/build-and-push-image:
          account-url:           << parameters.account-url >>
          aws-access-key-id:     << parameters.aws-access-key-id >>
          aws-secret-access-key: << parameters.aws-secret-access-key >>
          region:                << parameters.region >>
          dockerfile:            Dockerfile<< parameters.extension >>
          repo:                  << parameters.repo >>
          tag:                   << parameters.space >><< parameters.extension >>

      - deploy-to-cg:
          app:                 << parameters.app >>
          docker-registry-url: << parameters.account-url >>
          docker-image:        "<< parameters.repo >>:<< parameters.space >><< parameters.extension >>"


  restage:
    docker:
      - image: cimg/base:2020.01
    parameters:
      app:
        type: string
    steps:
      - checkout

      - deploy-to-cg:
          app:    << parameters.app >>
          action: restage      


##################################
##          Workflows           ##
##################################
workflows:
  version: 2
  build-test-deploy:
    jobs:
      - test

      - build-push-deploy:
          app:                        federalist-build-container<< matrix.extension >>
          space:                      production
          account-url:                AWS_ECR_ACCOUNT_URL_PRODUCTION
          aws-access-key-id:          AWS_ECR_WRITE_KEY_PRODUCTION
          aws-secret-access-key:      AWS_ECR_WRITE_SECRET_PRODUCTION
          region:                     AWS_ECR_REGION_PRODUCTION
          repo:                       federalist-production-ecr
          matrix:
            parameters:
              extension: ["", "-exp"]
          requires:
            - test
          filters:
            branches:
              only: main

      - build-push-deploy:
          app:                        federalist-build-container<< matrix.extension >>-staging
          space:                      staging
          account-url:                AWS_ECR_ACCOUNT_URL_STAGING
          aws-access-key-id:          AWS_ECR_WRITE_KEY_STAGING
          aws-secret-access-key:      AWS_ECR_WRITE_SECRET_STAGING
          region:                     AWS_ECR_REGION_STAGING
          repo:                       federalist-staging-ecr
          matrix:
            parameters:
              extension: ["", "-exp"]
          requires:
            - test
          filters:
            branches:
              only: staging

  nightly:
    triggers:
      - schedule:
          cron: "0 5 * * *"
          filters:
            branches:
              only:
                - main
                - staging
    jobs:
      - restage:
          matrix:
            parameters:
              app:
                - federalist-build-container
                - federalist-build-container-exp
          filters:
            branches:
              only: main

      - restage:
          matrix:
            parameters:
              app:
                - federalist-build-container-staging
                - federalist-build-container-exp-staging
          filters:
            branches:
              only: staging